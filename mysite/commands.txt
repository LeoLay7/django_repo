cd "путь к файлу" - переместиться в выбранную папку

python -m venv venv - создать виртуальное окружение(2-е venv- название)

pip list - установленные модули

.\venv\Scrips\activate - запустить виртуальное окружение

django-admin - посмотреть список командв

django-admin startproject "имя" - создать проект

python manage.py runserver (ip:port)- запустить сервер (ctrl+C - прекратить работу сервера)

python manage.py startapp "имя" - добавить приложение в проект

python manage.py makemigrations - создать миграции

python manage.py migrate - выполнить миграции в таблици sqlite

python manage.py shell - открыть интерактивную консоль Django

python manage.py createsuperuser - создать супер пользователя для админки django

python manage.py collectstatic - скопировать всю статику из STATIC_ROOT и STATIKFILES_DIRS

DjangoORM, все импортируется из django.db.models -->

<объект, с которым связывают>.<объект, который связали>_set.all() - получить связанные объекты
( category1.news_set.() , команда меняется related_name в модели)

<имя поля внешнего ключа>__<имя поля первичной модели> - получить связанные объекты по полю 
(News.objects.filter(category_title='Политика')) category - поле в News, получаем объекты по title

Category.objects.filter(news_title_contains='формы') - получить записи категории, в которых есть "формы"

News.objects.aggregate(Min(views), Max(views)) - кол-во просмотров

Урок 5
------------------------------------------------------------------------------------------------------------------------
MVC(Model View Controller) = MTV(Model Template View)
MVC- архитектурный паттерн

Model - Модель, которую мы используем(склад чая из примера)
View - вид, то как все должно выглядеть(конкретная упаковка чая из примера)
Controller - То, что что-то запрашивает, меняет, выдает(продавец чая из примера: спросил какой чай надо, взял чай,
                                                                                             упаковал его и выдал)
------------------------------------------------------------------------------------------------------------------------

Урок 6
------------------------------------------------------------------------------------------------------------------------
В списке urlpatterns(в файле проекта urls.py),который проверяется, когда парсится url запрос не надо хранить все
ссылки на функции из приложения(news.views), лучше создавать отдельную папку под url запросы в каждом приложении(news.urls),
а дальше фунцией include совать url'ы в urlpatterns в основном url файле проекта
------------------------------------------------------------------------------------------------------------------------

Урок 9
------------------------------------------------------------------------------------------------------------------------
добавить новую запись в таблицу:
from news.models import News

news = News(title='новость', content='контент новости')
news.save()  # save - метод сохранения

news = News.objects.create(title='новость', content='контент новости')  # само сохраняется

>>> news.pk
1     # pk = id(первичный ключ)

from django.db import connection
connection.queries  # все о созданном sql запросе

news = _  # _ это знак, означающий присвоить предыдущее выражение данной переменной
------------------------------------------------------------------------------------------------------------------------

Урок 10
------------------------------------------------------------------------------------------------------------------------
from news.models import News
-News.objects.all() # вернет сведения о всех объектах класса News словарем(итерируемый)
                   # способ выведения меняется магическими методами (__str__ меняет вывод значения в словаре)

-News.objects.filter(условие) # title='News 3' для примера. Вернет все значения, которые подходят под условие

-News.objects.get(условие)  # pk=3 для примера. Вернет значение, у которого pk=3, если таких значений больше одного,
                                                                                  или таких значений нет, вернет ошибку

-News.objects.order_by(параметр)  # 'title' отсортирует значения по заданному параметру

- News.objects.exclude(параметр)  # title='News 5' для примера. Вернет все значения, у которых title != 'News 5'
------------------------------------------------------------------------------------------------------------------------


Урок 11
------------------------------------------------------------------------------------------------------------------------
шаблон - html файл, в который подставляются значения из функции render(из файла news.views) {{ value }} - вместо value,
будет значение из словаря {'value' = 1}

забираем объекты с помощью News.objects.all() и суем все это в функцию return render(request, *путь html файла*,
*словарь с значениями*)
------------------------------------------------------------------------------------------------------------------------


Урок 12
------------------------------------------------------------------------------------------------------------------------
класс Meta
------------------------------------------------------------------------------------------------------------------------



